# Deploy to aws
name: Deploy to AWS

# Controls when the action will run.
on:
  push:
    branches: [main]

env:
  SERVER_HOST: 3.15.69.97
  SERVER_USERNAME: ubuntu

  NUXT_SITE_URL: "https://partner.sharparchive.com"
  NUXT_APP_NAME: "Sharp Archive Partner"
  NUXT_CDN_URL: "https://cdn.sharparchive.com/partner"
  NUXT_API_BASE_URL: "https://dev-api.sharparchive.com/api"
  NUXT_GOOGLE_MAP_KEY: "AIzaSyBMQgZvqzCVG0FFT5RsE59wjEYzQLncahI"
  STRIPE_KEY: "pk_test_51JPtOfFxsmIraXHUAgpplP9Gxn4LxlAnIgPgEaP5ruKyycAdJvv8ZrHHuPq11EQIDPSzDDjen1hZzF8cRiMqHOQg00kf7ORCg1"
# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  build:
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: Checkout 🛎
        uses: actions/checkout@v3

      - name: Setup node env 🏗
        uses: actions/setup-node@v3
        with:
          node-version: 16
          check-latest: true

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "dir=$(yarn cache dir)" >> $GITHUB_OUTPUT

      - uses: actions/cache@v3
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Install dependencies 👨🏻‍💻
        run: yarn install --prefer-offline --frozen-lockfile --non-interactive --production=false

      - name: Make envfile
        uses: SpicyPizza/create-envfile@v1.3
        with:
          envkey_GIT_COMMIT_SHA: ${{ github.sha }}
          envkey_NUXT_PUBLIC_SITE_URL: "${{ env.NUXT_PUBLIC_SITE_URL }}"
          envkey_NUXT_PUBLIC_APP_NAME: ${{ env.NUXT_PUBLIC_APP_NAME }}
          envkey_NUXT_PUBLIC_CDN_URL: ${{ env.NUXT_PUBLIC_CDN_URL }}

      - name: Run builder
        run: yarn build

      - name: Archive necessary folders and files
        uses: montudor/action-zip@v1
        with:
          args: zip -qq -r dist.zip .env .output ecosystem.config.js

      # Configure AWS credential and region environment variables for use with the AWS CLI and AWS SDKs
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Upload to Amazon S3
        run: aws s3 sync --delete .output/public s3://sharparchive/partner/ --cache-control max-age=31536000

      - name: Install SSH key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.SSH_KEY }}
          known_hosts: ${{ env.SERVER_HOST }}

      - name: Adding Known Hosts
        run: ssh-keyscan -H ${{ env.SERVER_HOST }} >> ~/.ssh/known_hosts

      - name: Rsync over ssh
        run: rsync -avz dist.zip ${{ env.SERVER_USERNAME }}@${{ env.SERVER_HOST }}:/home/${{ env.SERVER_USERNAME }}

      - name: Executing remote ssh commands using ssh key
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.SERVER_HOST }}
          username: ${{ env.SERVER_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            export PATH=/home/ubuntu/.fnm:$PATH
            eval "`fnm env`"
            source ~/.bashrc
            rm -rf partner
            mkdir partner
            mv dist.zip partner
            cd partner
            unzip dist.zip
            pm2 delete SharpArchivePartner
            pm2 start --only SharpArchivePartner

      - name: Send message to Slack
        id: slack
        uses: slackapi/slack-github-action@v1.18.0
        with:
          # For posting a rich message using Block Kit
          payload: |
            {
              "blocks": [
                {
                  "type": "header",
                  "text": {
                    "type": "plain_text",
                    "text": "Deployment to SA Partner",
                    "emoji": true
                  }
                },
                {
                  "type": "divider"
                },
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "mrkdwn",
                      "text": "*Status*\n${{ job.status }}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Deployed by:*\n<${{ github.event.repository.owner.html_url}}|${{ github.event.repository.owner.name}}>"
                    }
                  ]
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK
